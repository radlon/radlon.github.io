<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | らじうむ覚書]]></title>
  <link href="http://radlon.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://radlon.github.io/"/>
  <updated>2014-08-25T08:30:54+09:00</updated>
  <id>http://radlon.github.io/</id>
  <author>
    <name><![CDATA[radlon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopressにイメージを]]></title>
    <link href="http://radlon.github.io/blog/2014/08/09/image-in-octopress/"/>
    <updated>2014-08-09T19:11:03+09:00</updated>
    <id>http://radlon.github.io/blog/2014/08/09/image-in-octopress</id>
    <content type="html"><![CDATA[<h1>ブログに画像を貼り付けたい</h1>

<p>ブログに画像を貼り付けたいのです。</p>

<p>何かしら説明をする上で、画像はなくてはならない要素です。
見た目華やかになりますし、やっぱり画像は貼りたいですよね。</p>

<h1>画像の置き場所</h1>

<p>「source/images/」以下だと思われ。</p>

<p>直下に置いてしまうと、各記事の画像がごちゃ混ぜになってよろしくないので、記事毎にフォルダを切りましょう。</p>

<h1>Markdownの画像指定</h1>

<p>Markdown記法での画像の指定方法は以下です。</p>

<pre><code class="{.md}">![代替テキスト](画像のURL)
</code></pre>

<p>ここで指定する画像のURLはsourceからの相対パスで良いみたいです。</p>

<h1>試してみる</h1>

<p>とりあえず、一般的？な画像サイズ640×480の画像を貼ってみる。</p>

<pre><code class="{.md}">![640×480](/images/2014_08_09/640_480.png)
</code></pre>

<p><img src="/images/2014_08_09/640_480.png" alt="640×480" /></p>

<p>出来た！</p>

<h1>大きい画像</h1>

<p>大きい画像だとどうだろうか？</p>

<p>とりあえず、さっきの画像の倍のサイズの画像を用意してみた。</p>

<pre><code class="{.md}">![1280×960](/images/2014_08_09/1280_960.png)
</code></pre>

<p><img src="/images/2014_08_09/1280_960.png" alt="1280×960" /></p>

<p>フレーム幅に縮小してくれるっぽい。</p>

<p>（適用してるテーマに依ると思いますが）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressをはじめましょう]]></title>
    <link href="http://radlon.github.io/blog/2014/08/07/start-octopress/"/>
    <updated>2014-08-07T17:45:52+09:00</updated>
    <id>http://radlon.github.io/blog/2014/08/07/start-octopress</id>
    <content type="html"><![CDATA[<p>Octopressの環境構築で若干手間取ったので、記事作成の練習も兼ねて作業手順を纏めてみました。</p>

<p>ちなみにMacでの環境構築手順です。</p>

<p>Windowsの場合は若干手順の実行が面倒になる気はしますが、基本は同じだと思います。</p>

<h1>事前準備</h1>

<p>Octopress+gitHubPagesの環境を構築する上での事前準備です。</p>

<h2>gitインストール</h2>

<p>Macにはじめからインストールされてますね。バージョンが古いのでMacPortsで最新版をインストールした方が良いかもです。</p>

<h2>Ruby1.9系インストール</h2>

<p>MacPortsでインストールしましょう。</p>

<h2>rbenvインストール</h2>

<p>MacPortsでインストールしましょう。gitHubに最新版が公開されてるみたいですがインストールめどいですしね。</p>

<h2>gitHubにSSH公開鍵登録</h2>

<p>Octopressで生成したページをgitHubのリポジトリにPushする必要があるので、gitHubにSSH公開鍵を登録しましょう。</p>

<ol>
<li><p>SSH鍵を生成</p>

<p> まず、sshの秘密鍵、公開鍵を格納している.sshフォルダに移動します。</p></li>
</ol>


<pre><code>$ cd ~/.ssh
</code></pre>

<p>   次にssh-keygenで秘密鍵、公開鍵を生成します。
   以下のコマンドの「メールアドレス」には自分のメールアドレスとします。</p>

<pre><code>$ ssh-keygen -t rsa -C "メールアドレス"
</code></pre>

<p>   上記のコマンドを入れると次を聞かれるのでそれぞれ入力します。</p>

<ul>
<li><p> 生成するファイル名</p>

<p>   以下のファイル名で生成されます。</p>

<ul>
<li><p> 秘密鍵のファイル：(入力したファイル名)</p></li>
<li><p> 公開鍵のファイル：(入力したファイル名).pub</p></li>
</ul>
</li>
<li><p> パスフレーズ</p></li>
<li><p> パスフレーズ（確認）</p>

<p>生成した秘密鍵をMacさんに登録します。</p></li>
</ul>


<pre><code>$ ssh-add 秘密鍵のファイル
</code></pre>

<ol>
<li><p>gitHubに生成した公開鍵を登録</p>

<p> gitHubの自分のページから</p>

<p> Acount settings > SSH keys > Add SSH key</p>

<p> で、公開鍵登録用の画面をだします。</p>

<p> 画面上の「Title」に適当な名前を入力します。</p>

<p> 画面上の「key」に生成した公開鍵のファイルの内容をコピーします。(コピーするのは公開鍵の内容の全コピーです。)</p>

<p> Add keyで登録完了です。</p></li>
</ol>


<h1>Octopress環境構築</h1>

<p>正直<a href="http://octopress.org/docs/setup/">ここ</a>の通りですが</p>

<h2>Octopressをダウンロード</h2>

<pre><code>$ git clone git://github.com/imathis/octopress.git octopress
$ cd octopress
</code></pre>

<h2>bundleインストール</h2>

<pre><code>$ sudo gem install bundler
$ rbenv rehash
$ bundle install
</code></pre>

<p>bundlerを既に導入済みの場合はbundle installだけで良さそうです。</p>

<p>重複してgem install掛けても問題ないと思いますが。</p>

<h2>Octopressデフォルトテーマのインストール</h2>

<pre><code>$ rake install
</code></pre>

<p>たぶんここでインストールするときにオプション付けたりすることでカスタムテーマをインストールできるのだと思う。</p>

<p>まだやってないからわかんないけど。</p>

<h2>公開用のgitHubリポジトリ作成</h2>

<p>ブログを公開するのに使用するgitHubリポジトリを作成する。</p>

<p>あとで、rake deployしたときこのリポジトリにpushされる。</p>

<p>リポジトリ名は「(ユーザ名).github.io」にすると良いらしい。</p>

<p>このブログの場合は「radlon.github.io」にしました。</p>

<p>作成するときに「Initialize this repository with a README」のチェックボックスはオフのままとすると良いです。</p>

<p>このチェックボックスをオンにして作成してしまうとあとでrake deployしようとしたときにPushに失敗します。</p>

<p>(フォースでPushするように設定を変更すればrake deploy出来るようになるらしいですが、面倒ですし)</p>

<h2>公開先のリポジトリ設定</h2>

<pre><code>$ rake setup_github_pages
</code></pre>

<p>上記のコマンドを実行すると、公開先のリポジトリのURLを聞かれます。</p>

<p>さっき作った公開用のgitHubリポジトリのページにあるSSH clone URLを貼り付けてやりましょう。</p>

<p>(「git@github.com:radlon/radlon.github.io.git」みたいなやつです。)</p>

<h2>公開</h2>

<p>まず、次のコマンドでページを生成します。</p>

<pre><code>$ rake generate
</code></pre>

<p>どんな感じにページが生成されたか確認するには次のコマンドを使いましょう。</p>

<pre><code>$ rake preview
</code></pre>

<p><a href="localhost:4000">localhost:4000</a>で確認できます。</p>

<p>良さそうなら次のコマンドで公開先のリポジトリへデプロイします。</p>

<pre><code>$ rake deploy
</code></pre>

<p>これで「(ユーザ名).github.com」に公開されます。</p>

<p>ただし、すぐにアクセスしに行ってもgitHubのエラーページが表示されちゃいます。</p>

<p>エラーページにあるように10分くらい待つと公開されるようです。</p>

<h2>記事作成</h2>

<p>まず、記事のファイルを生成します。</p>

<pre><code>$ rake new_post['(タイトル)']
</code></pre>

<p>「source/_posts/」以下に.markdownファイルが生成されるので、このファイルにMarkdown形式で記事を書きます。</p>

<p>書き終わったら、上記のrake generate以降を行ってデプロイする感じです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, Octopress!]]></title>
    <link href="http://radlon.github.io/blog/2014/08/06/hello/"/>
    <updated>2014-08-06T18:00:23+09:00</updated>
    <id>http://radlon.github.io/blog/2014/08/06/hello</id>
    <content type="html"><![CDATA[<p>octopressで記事を投稿してみるテストです。</p>
]]></content>
  </entry>
  
</feed>
